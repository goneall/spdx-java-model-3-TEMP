/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.security;

import org.spdx.library.IndividualUriValue;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * VexJustificationType specifies the type of Vulnerability Exploitability eXchange 
 * (VEX) justification. 
 */
public enum VexJustificationType implements IndividualUriValue {

	VULNERABLE_CODE_NOT_PRESENT("vulnerableCodeNotPresent"),
	VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY("vulnerableCodeCannotBeControlledByAdversary"),
	COMPONENT_NOT_PRESENT("componentNotPresent"),
	VULNERABLE_CODE_NOT_IN_EXECUTE_PATH("vulnerableCodeNotInExecutePath"),
	INLINE_MITIGATIONS_ALREADY_EXIST("inlineMitigationsAlreadyExist");
	
	private String longName;
	
	private VexJustificationType(String longName) {
		this.longName = longName;
	}
	
	@Override
	public String getIndividualURI() {
		return getNameSpace() + "/" + getLongName();
	}
	
	public String getLongName() {
		return longName;
	}
	
	public String getNameSpace() {
		return "https://spdx.org/rdf/v3/Security/VexJustificationType";
	}
}

