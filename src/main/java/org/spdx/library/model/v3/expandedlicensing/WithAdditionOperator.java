/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.expandedlicensing;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;
import org.spdx.library.model.v3.simplelicensing.AnyLicenseInfo;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A WithAdditionOperator indicates that the designated License is subject to the 
 * designated LicenseAddition, which might be a license exception on the SPDX Exceptions 
 * List (ListedLicenseException) or may be other additional text (CustomLicenseAddition). 
 * It is represented in the SPDX License Expression Syntax by the `WITH` operator. 
 */
public class WithAdditionOperator extends AnyLicenseInfo  {

	
	/**
	 * Create the WithAdditionOperator with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the WithAdditionOperator
	 */
	public WithAdditionOperator() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the WithAdditionOperator
	 * @throws InvalidSPDXAnalysisException when unable to create the WithAdditionOperator
	 */
	public WithAdditionOperator(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the WithAdditionOperator is to be stored
	 * @param objectUri URI or anonymous ID for the WithAdditionOperator
	 * @param copyManager Copy manager for the WithAdditionOperator - can be null if copying is not required
	 * @param create true if WithAdditionOperator is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the WithAdditionOperator
	 */
	public WithAdditionOperator(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the WithAdditionOperator from the builder - used in the builder class
	 * @param builder Builder to create the WithAdditionOperator from
	 * @throws InvalidSPDXAnalysisException when unable to create the WithAdditionOperator
	 */
	protected WithAdditionOperator(WithAdditionOperatorBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setSubjectAddition(builder.subjectAddition);
		setSubjectLicense(builder.subjectLicense);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "ExpandedLicensing.WithAdditionOperator";
	}
	
	// Getters and Setters
	

	/**
	 * @return the subjectAddition
	 */
	 @SuppressWarnings("unchecked")
	public @Nullable LicenseAddition getSubjectAddition() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_SUBJECT_ADDITION);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof LicenseAddition)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (LicenseAddition)(retval.get());
		} else {
			return null;
		}
	}
		
	/**
	 * @param subjectAddition the subjectAddition to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public WithAdditionOperator setSubjectAddition(@Nullable LicenseAddition subjectAddition) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(subjectAddition)) {
			throw new InvalidSPDXAnalysisException("subjectAddition is a required property");
		}
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_SUBJECT_ADDITION, subjectAddition);
		return this;
	}

	/**
	 * @return the subjectLicense
	 */
	 @SuppressWarnings("unchecked")
	public @Nullable ExtendableLicense getSubjectLicense() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_SUBJECT_LICENSE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof ExtendableLicense)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (ExtendableLicense)(retval.get());
		} else {
			return null;
		}
	}
		
	/**
	 * @param subjectLicense the subjectLicense to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public WithAdditionOperator setSubjectLicense(@Nullable ExtendableLicense subjectLicense) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(subjectLicense)) {
			throw new InvalidSPDXAnalysisException("subjectLicense is a required property");
		}
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_SUBJECT_LICENSE, subjectLicense);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "WithAdditionOperator: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		LicenseAddition subjectAddition;
		try {
			subjectAddition = getSubjectAddition();
			if (Objects.nonNull(subjectAddition)) {
				retval.addAll(subjectAddition.verify(verifiedIds, specVersionForVerify, profiles));
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.EXPANDED_LICENSING }))) {
					retval.add("Missing subjectAddition in WithAdditionOperator");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting subjectAddition for WithAdditionOperator: "+e.getMessage());
		}
		ExtendableLicense subjectLicense;
		try {
			subjectLicense = getSubjectLicense();
			if (Objects.nonNull(subjectLicense)) {
				retval.addAll(subjectLicense.verify(verifiedIds, specVersionForVerify, profiles));
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.EXPANDED_LICENSING }))) {
					retval.add("Missing subjectLicense in WithAdditionOperator");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting subjectLicense for WithAdditionOperator: "+e.getMessage());
		}
		return retval;
	}
	
	public static class WithAdditionOperatorBuilder extends AnyLicenseInfoBuilder {
	
		/**
		 * Create an WithAdditionOperatorBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public WithAdditionOperatorBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an WithAdditionOperatorBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public WithAdditionOperatorBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a WithAdditionOperatorBuilder
		 * @param modelStore model store for the built WithAdditionOperator
		 * @param objectUri objectUri for the built WithAdditionOperator
		 * @param copyManager optional copyManager for the built WithAdditionOperator
		 */
		public WithAdditionOperatorBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		LicenseAddition subjectAddition = null;
		ExtendableLicense subjectLicense = null;
		
		
		/**
		 * Sets the initial value of subjectAddition
		 * @parameter subjectAddition value to set
		 * @return this for chaining
		**/
		public WithAdditionOperatorBuilder setSubjectAddition(LicenseAddition subjectAddition) {
			this.subjectAddition = subjectAddition;
			return this;
		}
		
		/**
		 * Sets the initial value of subjectLicense
		 * @parameter subjectLicense value to set
		 * @return this for chaining
		**/
		public WithAdditionOperatorBuilder setSubjectLicense(ExtendableLicense subjectLicense) {
			this.subjectLicense = subjectLicense;
			return this;
		}
	
		
		/**
		 * @return the WithAdditionOperator
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public WithAdditionOperator build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new WithAdditionOperator(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
