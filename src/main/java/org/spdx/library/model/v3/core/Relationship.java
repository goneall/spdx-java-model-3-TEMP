/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A Relationship is a grouping of characteristics unique to an assertion that one Element 
 * is related to one or more other Elements in some way. 
 */
public class Relationship extends Element  {

	Collection<Element> tos;
	
	/**
	 * Create the Relationship with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Relationship
	 */
	public Relationship() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Relationship
	 * @throws InvalidSPDXAnalysisException when unable to create the Relationship
	 */
	public Relationship(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Relationship is to be stored
	 * @param objectUri URI or anonymous ID for the Relationship
	 * @param copyManager Copy manager for the Relationship - can be null if copying is not required
	 * @param create true if Relationship is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Relationship
	 */
	 @SuppressWarnings("unchecked")
	public Relationship(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		tos = (Collection<Element>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_TO, Element.class);
	}

	/**
	 * Create the Relationship from the builder - used in the builder class
	 * @param builder Builder to create the Relationship from
	 * @throws InvalidSPDXAnalysisException when unable to create the Relationship
	 */
	 @SuppressWarnings("unchecked")
	protected Relationship(RelationshipBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		tos = (Collection<Element>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_TO, Element.class);
		getTos().addAll(builder.tos);
		setFrom(builder.from);
		setCompleteness(builder.completeness);
		setRelationshipType(builder.relationshipType);
		setStartTime(builder.startTime);
		setEndTime(builder.endTime);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.Relationship";
	}
	
	// Getters and Setters
	public Collection<Element> getTos() {
		return tos;
	}
	

	/**
	 * @return the from
	 */
	 @SuppressWarnings("unchecked")
	public @Nullable Element getFrom() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.CORE_PROP_FROM);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof Element)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Element)(retval.get());
		} else {
			return null;
		}
	}
		
	/**
	 * @param from the from to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Relationship setFrom(@Nullable Element from) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(from)) {
			throw new InvalidSPDXAnalysisException("from is a required property");
		}
		setPropertyValue(SpdxConstantsV3.CORE_PROP_FROM, from);
		return this;
	}
	
	/**
	 * @return the completeness
	 */
	 @SuppressWarnings("unchecked")
	public Optional<RelationshipCompleteness> getCompleteness() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.CORE_PROP_COMPLETENESS);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof RelationshipCompleteness)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<RelationshipCompleteness>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param completeness the completeness to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Relationship setCompleteness(@Nullable RelationshipCompleteness completeness) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_COMPLETENESS, completeness);
		return this;
	}
	
	/**
	 * @return the relationshipType
	 */
	public @Nullable RelationshipType getRelationshipType() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.CORE_PROP_RELATIONSHIP_TYPE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof RelationshipType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (RelationshipType)(retval.get());
		} else {
			return null;
		}
	}
	/**
	 * @param relationshipType the relationshipType to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Relationship setRelationshipType(@Nullable RelationshipType relationshipType) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(relationshipType)) {
			throw new InvalidSPDXAnalysisException("relationshipType is a required property");
		}
		setPropertyValue(SpdxConstantsV3.CORE_PROP_RELATIONSHIP_TYPE, relationshipType);
		return this;
	}

		/**
	 * @return the startTime
	 */
	public Optional<String> getStartTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.CORE_PROP_START_TIME);
	}
	/**
	 * @param startTime the startTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Relationship setStartTime(@Nullable String startTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_START_TIME, startTime);
		return this;
	}

		/**
	 * @return the endTime
	 */
	public Optional<String> getEndTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.CORE_PROP_END_TIME);
	}
	/**
	 * @param endTime the endTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Relationship setEndTime(@Nullable String endTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_END_TIME, endTime);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Relationship: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		Element from;
		try {
			from = getFrom();
			if (Objects.nonNull(from)) {
				retval.addAll(from.verify(verifiedIds, specVersionForVerify, profiles));
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.CORE }))) {
					retval.add("Missing from in Relationship");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting from for Relationship: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<RelationshipCompleteness> completeness = getCompleteness();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting completeness for Relationship: "+e.getMessage());
		}
		try {
			RelationshipType relationshipType = getRelationshipType();
			if (Objects.isNull(relationshipType) && 
						Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.CORE }))) {
				retval.add("Missing relationshipType in Relationship");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting relationshipType for Relationship: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> startTime = getStartTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting startTime for Relationship: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> endTime = getEndTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting endTime for Relationship: "+e.getMessage());
		}
		for (Element to:tos) {
			retval.addAll(to.verify(verifiedIds, specVersionForVerify, profiles));
		}
		return retval;
	}
	
	public static class RelationshipBuilder extends ElementBuilder {
	
		/**
		 * Create an RelationshipBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public RelationshipBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an RelationshipBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public RelationshipBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a RelationshipBuilder
		 * @param modelStore model store for the built Relationship
		 * @param objectUri objectUri for the built Relationship
		 * @param copyManager optional copyManager for the built Relationship
		 */
		public RelationshipBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<Element> tos = new ArrayList<>();
		Element from = null;
		RelationshipCompleteness completeness = null;
		RelationshipType relationshipType = null;
		String startTime = null;
		String endTime = null;
		
		
		/**
		 * Adds a to to the initial collection
		 * @parameter to to to add
		 * @return this for chaining
		**/
		public RelationshipBuilder addTo(Element to) {
			if (Objects.nonNull(to)) {
				tos.add(to);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial to collection
		 * @parameter toCollection collection to initialize the to
		 * @return this for chaining
		**/
		public RelationshipBuilder addAllTo(Collection<Element> toCollection) {
			if (Objects.nonNull(toCollection)) {
				tos.addAll(toCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of from
		 * @parameter from value to set
		 * @return this for chaining
		**/
		public RelationshipBuilder setFrom(Element from) {
			this.from = from;
			return this;
		}
		
		/**
		 * Sets the initial value of completeness
		 * @parameter completeness value to set
		 * @return this for chaining
		**/
		public RelationshipBuilder setCompleteness(RelationshipCompleteness completeness) {
			this.completeness = completeness;
			return this;
		}
		
		/**
		 * Sets the initial value of relationshipType
		 * @parameter relationshipType value to set
		 * @return this for chaining
		**/
		public RelationshipBuilder setRelationshipType(RelationshipType relationshipType) {
			this.relationshipType = relationshipType;
			return this;
		}
		
		/**
		 * Sets the initial value of startTime
		 * @parameter startTime value to set
		 * @return this for chaining
		**/
		public RelationshipBuilder setStartTime(String startTime) {
			this.startTime = startTime;
			return this;
		}
		
		/**
		 * Sets the initial value of endTime
		 * @parameter endTime value to set
		 * @return this for chaining
		**/
		public RelationshipBuilder setEndTime(String endTime) {
			this.endTime = endTime;
			return this;
		}
	
		
		/**
		 * @return the Relationship
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Relationship build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Relationship(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
