/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.security;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.Artifact;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * Specifies a vulnerability and its associated information. **Syntax** ```json 
 * { "@type": "Vulnerability", "@id": "urn:spdx.dev:vuln-1", "summary": "Use of 
 * a Broken or Risky Cryptographic Algorithm", "description": "The npm package `elliptic` 
 * before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation 
 * in elliptic/ec/key.js. There is no check to confirm that the public key point passed 
 * into the derive function actually exists on the secp256k1 curve. This results in 
 * the potential for the private key used in this implementation to be revealed after 
 * a number of ECDH operations are performed.", "modified": "2021-03-08T16:02:43Z", 
 * "published": "2021-03-08T16:06:50Z", "externalIdentifiers": [ { "@type": "ExternalIdentifier", 
 * "externalIdentifierType": "cve", "identifier": "CVE-2020-2849", "identifierLocator": 
 * [ "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28498", "https://www.cve.org/CVERecord?id=CVE-2020-28498" 
 * ], "issuingAuthority": "urn:spdx.dev:agent-cve.org" }, { "type": "ExternalIdentifier", 
 * "externalIdentifierType": "securityOther", "identifier": "GHSA-r9p9-mrjm-926w", 
 * "identifierLocator": "https://github.com/advisories/GHSA-r9p9-mrjm-926w" 
 * }, { "type": "ExternalIdentifier", "externalIdentifierType": "securityOther", 
 * "identifier": "SNYK-JS-ELLIPTIC-1064899", "identifierLocator": "https://security.snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899" 
 * } ], "externalRefs": [ { "@type": "ExternalRef", "externalRefType": "securityAdvisory", 
 * "locator": "https://nvd.nist.gov/vuln/detail/CVE-2020-28498" }, { "@type": 
 * "ExternalRef", "externalRefType": "securityAdvisory", "locator": "https://ubuntu.com/security/CVE-2020-28498" 
 * }, { "@type": "ExternalRef", "externalRefType": "securityOther", "locator": 
 * "https://github.com/indutny/elliptic/pull/244/commits" }, { "@type": "ExternalRef", 
 * "externalRefType": "securityOther", "locator": "https://github.com/christianlundkvist/blog/blob/master/2020_05_26_secp256k1_twist_attacks/secp256k1_twist_attacks.md" 
 * } ] }, { "@type": "Relationship", "@id": "urn:spdx.dev:vulnRelationship-1", 
 * "relationshipType": "hasAssociatedVulnerability", "from": "urn:npm-elliptic-6.5.2", 
 * "to": ["urn:spdx.dev:vuln-1"], "startTime": "2021-03-08T16:06:50Z" }, { "@type": 
 * "Relationship", "@id": "urn:spdx.dev:vulnAgentRel-1", "relationshipType": 
 * "publishedBy", "from": "urn:spdx.dev:vuln-1", "to": ["urn:spdx.dev:agent-snyk"], 
 * "startTime": "2021-03-08T16:06:50Z" } ``` 
 */
public class Vulnerability extends Artifact  {

	
	/**
	 * Create the Vulnerability with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Vulnerability
	 */
	public Vulnerability() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Vulnerability
	 * @throws InvalidSPDXAnalysisException when unable to create the Vulnerability
	 */
	public Vulnerability(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Vulnerability is to be stored
	 * @param objectUri URI or anonymous ID for the Vulnerability
	 * @param copyManager Copy manager for the Vulnerability - can be null if copying is not required
	 * @param create true if Vulnerability is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Vulnerability
	 */
	public Vulnerability(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the Vulnerability from the builder - used in the builder class
	 * @param builder Builder to create the Vulnerability from
	 * @throws InvalidSPDXAnalysisException when unable to create the Vulnerability
	 */
	protected Vulnerability(VulnerabilityBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setWithdrawnTime(builder.withdrawnTime);
		setModifiedTime(builder.modifiedTime);
		setPublishedTime(builder.publishedTime);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Security.Vulnerability";
	}
	
	// Getters and Setters
	

		/**
	 * @return the withdrawnTime
	 */
	public Optional<String> getWithdrawnTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_WITHDRAWN_TIME);
	}
	/**
	 * @param withdrawnTime the withdrawnTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Vulnerability setWithdrawnTime(@Nullable String withdrawnTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_WITHDRAWN_TIME, withdrawnTime);
		return this;
	}

		/**
	 * @return the modifiedTime
	 */
	public Optional<String> getModifiedTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_MODIFIED_TIME);
	}
	/**
	 * @param modifiedTime the modifiedTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Vulnerability setModifiedTime(@Nullable String modifiedTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_MODIFIED_TIME, modifiedTime);
		return this;
	}

		/**
	 * @return the publishedTime
	 */
	public Optional<String> getPublishedTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_PUBLISHED_TIME);
	}
	/**
	 * @param publishedTime the publishedTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Vulnerability setPublishedTime(@Nullable String publishedTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_PUBLISHED_TIME, publishedTime);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Vulnerability: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<String> withdrawnTime = getWithdrawnTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting withdrawnTime for Vulnerability: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> modifiedTime = getModifiedTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting modifiedTime for Vulnerability: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> publishedTime = getPublishedTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting publishedTime for Vulnerability: "+e.getMessage());
		}
		return retval;
	}
	
	public static class VulnerabilityBuilder extends ArtifactBuilder {
	
		/**
		 * Create an VulnerabilityBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public VulnerabilityBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an VulnerabilityBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public VulnerabilityBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a VulnerabilityBuilder
		 * @param modelStore model store for the built Vulnerability
		 * @param objectUri objectUri for the built Vulnerability
		 * @param copyManager optional copyManager for the built Vulnerability
		 */
		public VulnerabilityBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		String withdrawnTime = null;
		String modifiedTime = null;
		String publishedTime = null;
		
		
		/**
		 * Sets the initial value of withdrawnTime
		 * @parameter withdrawnTime value to set
		 * @return this for chaining
		**/
		public VulnerabilityBuilder setWithdrawnTime(String withdrawnTime) {
			this.withdrawnTime = withdrawnTime;
			return this;
		}
		
		/**
		 * Sets the initial value of modifiedTime
		 * @parameter modifiedTime value to set
		 * @return this for chaining
		**/
		public VulnerabilityBuilder setModifiedTime(String modifiedTime) {
			this.modifiedTime = modifiedTime;
			return this;
		}
		
		/**
		 * Sets the initial value of publishedTime
		 * @parameter publishedTime value to set
		 * @return this for chaining
		**/
		public VulnerabilityBuilder setPublishedTime(String publishedTime) {
			this.publishedTime = publishedTime;
			return this;
		}
	
		
		/**
		 * @return the Vulnerability
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Vulnerability build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Vulnerability(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
