/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.expandedlicensing;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A ListedLicenseException represents an exception to a License (in other words, 
 * an exception to a license condition or an additional permission beyond those granted 
 * in a License) which is listed on the SPDX Exceptions List at https://spdx.org/licenses/exceptions-index.html. 
 */
public class ListedLicenseException extends LicenseAddition  {

	
	/**
	 * Create the ListedLicenseException with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the ListedLicenseException
	 */
	public ListedLicenseException() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the ListedLicenseException
	 * @throws InvalidSPDXAnalysisException when unable to create the ListedLicenseException
	 */
	public ListedLicenseException(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the ListedLicenseException is to be stored
	 * @param objectUri URI or anonymous ID for the ListedLicenseException
	 * @param copyManager Copy manager for the ListedLicenseException - can be null if copying is not required
	 * @param create true if ListedLicenseException is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the ListedLicenseException
	 */
	public ListedLicenseException(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the ListedLicenseException from the builder - used in the builder class
	 * @param builder Builder to create the ListedLicenseException from
	 * @throws InvalidSPDXAnalysisException when unable to create the ListedLicenseException
	 */
	protected ListedLicenseException(ListedLicenseExceptionBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setDeprecatedVersion(builder.deprecatedVersion);
		setListVersionAdded(builder.listVersionAdded);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "ExpandedLicensing.ListedLicenseException";
	}
	
	// Getters and Setters
	

		/**
	 * @return the deprecatedVersion
	 */
	public Optional<String> getDeprecatedVersion() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_DEPRECATED_VERSION);
	}
	/**
	 * @param deprecatedVersion the deprecatedVersion to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ListedLicenseException setDeprecatedVersion(@Nullable String deprecatedVersion) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_DEPRECATED_VERSION, deprecatedVersion);
		return this;
	}

		/**
	 * @return the listVersionAdded
	 */
	public Optional<String> getListVersionAdded() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_LIST_VERSION_ADDED);
	}
	/**
	 * @param listVersionAdded the listVersionAdded to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ListedLicenseException setListVersionAdded(@Nullable String listVersionAdded) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_LIST_VERSION_ADDED, listVersionAdded);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "ListedLicenseException: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<String> deprecatedVersion = getDeprecatedVersion();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting deprecatedVersion for ListedLicenseException: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> listVersionAdded = getListVersionAdded();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting listVersionAdded for ListedLicenseException: "+e.getMessage());
		}
		return retval;
	}
	
	public static class ListedLicenseExceptionBuilder extends LicenseAdditionBuilder {
	
		/**
		 * Create an ListedLicenseExceptionBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public ListedLicenseExceptionBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an ListedLicenseExceptionBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public ListedLicenseExceptionBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a ListedLicenseExceptionBuilder
		 * @param modelStore model store for the built ListedLicenseException
		 * @param objectUri objectUri for the built ListedLicenseException
		 * @param copyManager optional copyManager for the built ListedLicenseException
		 */
		public ListedLicenseExceptionBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		String deprecatedVersion = null;
		String listVersionAdded = null;
		
		
		/**
		 * Sets the initial value of deprecatedVersion
		 * @parameter deprecatedVersion value to set
		 * @return this for chaining
		**/
		public ListedLicenseExceptionBuilder setDeprecatedVersion(String deprecatedVersion) {
			this.deprecatedVersion = deprecatedVersion;
			return this;
		}
		
		/**
		 * Sets the initial value of listVersionAdded
		 * @parameter listVersionAdded value to set
		 * @return this for chaining
		**/
		public ListedLicenseExceptionBuilder setListVersionAdded(String listVersionAdded) {
			this.listVersionAdded = listVersionAdded;
			return this;
		}
	
		
		/**
		 * @return the ListedLicenseException
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public ListedLicenseException build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new ListedLicenseException(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
