/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.security;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * An ExploitCatalogVulnAssessmentRelationship describes if a vulnerability is 
 * listed in any exploit catalog such as the CISA Known Exploited Vulnerabilities Catalog 
 * (KEV) [https://www.cisa.gov/known-exploited-vulnerabilities-catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog). 
 * **Constraints** - The relationship type must be set to hasAssessmentFor. **Syntax** 
 * ```json { "@type": "ExploitCatalogVulnAssessmentRelationship", "@id": "urn:spdx.dev:exploit-catalog-1", 
 * "relationshipType": "hasAssessmentFor", "catalogType": "kev", "locator": 
 * "https://www.cisa.gov/known-exploited-vulnerabilities-catalog", "exploited": 
 * "true", "from": "urn:spdx.dev:vuln-cve-2023-2136", "to": ["urn:product-google-chrome-112.0.5615.136"], 
 * "suppliedBy": ["urn:spdx.dev:agent-jane-doe"], "publishedTime": "2021-03-09T11:04:53Z" 
 * } ``` 
 */
public class ExploitCatalogVulnAssessmentRelationship extends VulnAssessmentRelationship  {

	
	/**
	 * Create the ExploitCatalogVulnAssessmentRelationship with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the ExploitCatalogVulnAssessmentRelationship
	 */
	public ExploitCatalogVulnAssessmentRelationship() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the ExploitCatalogVulnAssessmentRelationship
	 * @throws InvalidSPDXAnalysisException when unable to create the ExploitCatalogVulnAssessmentRelationship
	 */
	public ExploitCatalogVulnAssessmentRelationship(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the ExploitCatalogVulnAssessmentRelationship is to be stored
	 * @param objectUri URI or anonymous ID for the ExploitCatalogVulnAssessmentRelationship
	 * @param copyManager Copy manager for the ExploitCatalogVulnAssessmentRelationship - can be null if copying is not required
	 * @param create true if ExploitCatalogVulnAssessmentRelationship is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the ExploitCatalogVulnAssessmentRelationship
	 */
	public ExploitCatalogVulnAssessmentRelationship(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the ExploitCatalogVulnAssessmentRelationship from the builder - used in the builder class
	 * @param builder Builder to create the ExploitCatalogVulnAssessmentRelationship from
	 * @throws InvalidSPDXAnalysisException when unable to create the ExploitCatalogVulnAssessmentRelationship
	 */
	protected ExploitCatalogVulnAssessmentRelationship(ExploitCatalogVulnAssessmentRelationshipBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setCatalogType(builder.catalogType);
		setExploited(builder.exploited);
		setLocator(builder.locator);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Security.ExploitCatalogVulnAssessmentRelationship";
	}
	
	// Getters and Setters
	
	
	/**
	 * @return the catalogType
	 */
	public @Nullable ExploitCatalogType getCatalogType() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.SECURITY_PROP_CATALOG_TYPE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof ExploitCatalogType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (ExploitCatalogType)(retval.get());
		} else {
			return null;
		}
	}
	/**
	 * @param catalogType the catalogType to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExploitCatalogVulnAssessmentRelationship setCatalogType(@Nullable ExploitCatalogType catalogType) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(catalogType)) {
			throw new InvalidSPDXAnalysisException("catalogType is a required property");
		}
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_CATALOG_TYPE, catalogType);
		return this;
	}

	/**
	 * @return the exploited
	 */
	public @Nullable Boolean getExploited() throws InvalidSPDXAnalysisException {
		Optional<Boolean> retval = getBooleanPropertyValue(SpdxConstantsV3.SECURITY_PROP_EXPLOITED);
		return retval.isPresent() ? retval.get() : null;
	}
		
	/**
	 * @param exploited the exploited to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExploitCatalogVulnAssessmentRelationship setExploited(@Nullable Boolean exploited) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(exploited)) {
			throw new InvalidSPDXAnalysisException("exploited is a required property");
		}
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_EXPLOITED, exploited);
		return this;
	}

	/**
	 * @return the locator
	 */
	public @Nullable String getLocator() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_LOCATOR);
		return retval.isPresent() ? retval.get() : null;
	}
		/**
	 * @param locator the locator to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExploitCatalogVulnAssessmentRelationship setLocator(@Nullable String locator) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(locator)) {
			throw new InvalidSPDXAnalysisException("locator is a required property");
		}
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_LOCATOR, locator);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "ExploitCatalogVulnAssessmentRelationship: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			ExploitCatalogType catalogType = getCatalogType();
			if (Objects.isNull(catalogType) && 
						Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.SECURITY }))) {
				retval.add("Missing catalogType in ExploitCatalogVulnAssessmentRelationship");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting catalogType for ExploitCatalogVulnAssessmentRelationship: "+e.getMessage());
		}
		try {
			Boolean exploited = getExploited();
			if (Objects.isNull(exploited) && 
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.SECURITY }))) {
				retval.add("Missing exploited in ExploitCatalogVulnAssessmentRelationship");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting exploited for ExploitCatalogVulnAssessmentRelationship: "+e.getMessage());
		}
		try {
			String locator = getLocator();
			if (Objects.isNull(locator) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.SECURITY }))) {
				retval.add("Missing locator in ExploitCatalogVulnAssessmentRelationship");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting locator for ExploitCatalogVulnAssessmentRelationship: "+e.getMessage());
		}
		return retval;
	}
	
	public static class ExploitCatalogVulnAssessmentRelationshipBuilder extends VulnAssessmentRelationshipBuilder {
	
		/**
		 * Create an ExploitCatalogVulnAssessmentRelationshipBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public ExploitCatalogVulnAssessmentRelationshipBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an ExploitCatalogVulnAssessmentRelationshipBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public ExploitCatalogVulnAssessmentRelationshipBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a ExploitCatalogVulnAssessmentRelationshipBuilder
		 * @param modelStore model store for the built ExploitCatalogVulnAssessmentRelationship
		 * @param objectUri objectUri for the built ExploitCatalogVulnAssessmentRelationship
		 * @param copyManager optional copyManager for the built ExploitCatalogVulnAssessmentRelationship
		 */
		public ExploitCatalogVulnAssessmentRelationshipBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		ExploitCatalogType catalogType = null;
		Boolean exploited = null;
		String locator = null;
		
		
		/**
		 * Sets the initial value of catalogType
		 * @parameter catalogType value to set
		 * @return this for chaining
		**/
		public ExploitCatalogVulnAssessmentRelationshipBuilder setCatalogType(ExploitCatalogType catalogType) {
			this.catalogType = catalogType;
			return this;
		}
		
		/**
		 * Sets the initial value of exploited
		 * @parameter exploited value to set
		 * @return this for chaining
		**/
		public ExploitCatalogVulnAssessmentRelationshipBuilder setExploited(Boolean exploited) {
			this.exploited = exploited;
			return this;
		}
		
		/**
		 * Sets the initial value of locator
		 * @parameter locator value to set
		 * @return this for chaining
		**/
		public ExploitCatalogVulnAssessmentRelationshipBuilder setLocator(String locator) {
			this.locator = locator;
			return this;
		}
	
		
		/**
		 * @return the ExploitCatalogVulnAssessmentRelationship
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public ExploitCatalogVulnAssessmentRelationship build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new ExploitCatalogVulnAssessmentRelationship(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
