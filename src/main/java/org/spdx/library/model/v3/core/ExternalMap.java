/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * An External Map is a map of Element identifiers that are used within a Document but 
 * defined external to that Document. The external map provides details about the externally-defined 
 * Element such as its provenance, where to retrieve it, and how to verify its integrity. 
 */
public class ExternalMap extends ModelObject  {

	Collection<IntegrityMethod> verifiedUsings;
	
	/**
	 * Create the ExternalMap with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the ExternalMap
	 */
	public ExternalMap() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the ExternalMap
	 * @throws InvalidSPDXAnalysisException when unable to create the ExternalMap
	 */
	public ExternalMap(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the ExternalMap is to be stored
	 * @param objectUri URI or anonymous ID for the ExternalMap
	 * @param copyManager Copy manager for the ExternalMap - can be null if copying is not required
	 * @param create true if ExternalMap is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the ExternalMap
	 */
	 @SuppressWarnings("unchecked")
	public ExternalMap(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		verifiedUsings = (Collection<IntegrityMethod>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_VERIFIED_USING, IntegrityMethod.class);
	}

	/**
	 * Create the ExternalMap from the builder - used in the builder class
	 * @param builder Builder to create the ExternalMap from
	 * @throws InvalidSPDXAnalysisException when unable to create the ExternalMap
	 */
	 @SuppressWarnings("unchecked")
	protected ExternalMap(ExternalMapBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		verifiedUsings = (Collection<IntegrityMethod>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_VERIFIED_USING, IntegrityMethod.class);
		getVerifiedUsings().addAll(builder.verifiedUsings);
		setDefiningDocument(builder.definingDocument);
		setExternalId(builder.externalId);
		setLocationHint(builder.locationHint);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.ExternalMap";
	}
	
	// Getters and Setters
	public Collection<IntegrityMethod> getVerifiedUsings() {
		return verifiedUsings;
	}
	

		/**
	 * @return the definingDocument
	 */
	public Optional<String> getDefiningDocument() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.CORE_PROP_DEFINING_DOCUMENT);
	}
	/**
	 * @param definingDocument the definingDocument to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExternalMap setDefiningDocument(@Nullable String definingDocument) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_DEFINING_DOCUMENT, definingDocument);
		return this;
	}

	/**
	 * @return the externalId
	 */
	public @Nullable String getExternalId() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstantsV3.CORE_PROP_EXTERNAL_ID);
		return retval.isPresent() ? retval.get() : null;
	}
		/**
	 * @param externalId the externalId to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExternalMap setExternalId(@Nullable String externalId) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(externalId)) {
			throw new InvalidSPDXAnalysisException("externalId is a required property");
		}
		setPropertyValue(SpdxConstantsV3.CORE_PROP_EXTERNAL_ID, externalId);
		return this;
	}

		/**
	 * @return the locationHint
	 */
	public Optional<String> getLocationHint() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.CORE_PROP_LOCATION_HINT);
	}
	/**
	 * @param locationHint the locationHint to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExternalMap setLocationHint(@Nullable String locationHint) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_LOCATION_HINT, locationHint);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "ExternalMap: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		try {
			@SuppressWarnings("unused")
			Optional<String> definingDocument = getDefiningDocument();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting definingDocument for ExternalMap: "+e.getMessage());
		}
		try {
			String externalId = getExternalId();
			if (Objects.isNull(externalId) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.CORE }))) {
				retval.add("Missing externalId in ExternalMap");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting externalId for ExternalMap: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> locationHint = getLocationHint();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting locationHint for ExternalMap: "+e.getMessage());
		}
		for (IntegrityMethod verifiedUsing:verifiedUsings) {
			retval.addAll(verifiedUsing.verify(verifiedIds, specVersionForVerify, profiles));
		}
		return retval;
	}
	
	public static class ExternalMapBuilder extends CoreModelObjectBuilder {
	
		/**
		 * Create an ExternalMapBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public ExternalMapBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an ExternalMapBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public ExternalMapBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a ExternalMapBuilder
		 * @param modelStore model store for the built ExternalMap
		 * @param objectUri objectUri for the built ExternalMap
		 * @param copyManager optional copyManager for the built ExternalMap
		 */
		public ExternalMapBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<IntegrityMethod> verifiedUsings = new ArrayList<>();
		String definingDocument = null;
		String externalId = null;
		String locationHint = null;
		
		
		/**
		 * Adds a verifiedUsing to the initial collection
		 * @parameter verifiedUsing verifiedUsing to add
		 * @return this for chaining
		**/
		public ExternalMapBuilder addVerifiedUsing(IntegrityMethod verifiedUsing) {
			if (Objects.nonNull(verifiedUsing)) {
				verifiedUsings.add(verifiedUsing);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial verifiedUsing collection
		 * @parameter verifiedUsingCollection collection to initialize the verifiedUsing
		 * @return this for chaining
		**/
		public ExternalMapBuilder addAllVerifiedUsing(Collection<IntegrityMethod> verifiedUsingCollection) {
			if (Objects.nonNull(verifiedUsingCollection)) {
				verifiedUsings.addAll(verifiedUsingCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of definingDocument
		 * @parameter definingDocument value to set
		 * @return this for chaining
		**/
		public ExternalMapBuilder setDefiningDocument(String definingDocument) {
			this.definingDocument = definingDocument;
			return this;
		}
		
		/**
		 * Sets the initial value of externalId
		 * @parameter externalId value to set
		 * @return this for chaining
		**/
		public ExternalMapBuilder setExternalId(String externalId) {
			this.externalId = externalId;
			return this;
		}
		
		/**
		 * Sets the initial value of locationHint
		 * @parameter locationHint value to set
		 * @return this for chaining
		**/
		public ExternalMapBuilder setLocationHint(String locationHint) {
			this.locationHint = locationHint;
			return this;
		}
	
		
		/**
		 * @return the ExternalMap
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public ExternalMap build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new ExternalMap(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
