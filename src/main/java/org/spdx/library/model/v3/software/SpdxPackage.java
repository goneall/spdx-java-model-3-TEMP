/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.software;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.core.DefaultModelStore;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.core.IModelCopyManager;
import org.spdx.core.IndividualUriValue;
import org.spdx.library.model.v3.ModelObjectV3;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A package refers to any unit of content that can be associated with a distribution 
 * of software. Typically, a package is composed of one or more files. Any of the following 
 * non-limiting examples may be (but are not required to be) represented in SPDX as a 
 * package: - a tarball, zip file or other archive - a directory or sub-directory - a separately 
 * distributed piece of software which another Package or File uses or depends upon 
 * (e.g., a Python package, a Go module, ...) - a container image, and/or each image layer 
 * within a container image - a collection of one or more sub-packages - a Git repository 
 * snapshot from a particular point in time Note that some of these could be represented 
 * in SPDX as a file as well. External property restriction on /Core/Element/name: 
 * minCount: 1 
 */
public class SpdxPackage extends SoftwareArtifact  {

	
	/**
	 * Create the SpdxPackage with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the SpdxPackage
	 */
	public SpdxPackage() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous));
	}

	/**
	 * @param objectUri URI or anonymous ID for the SpdxPackage
	 * @throws InvalidSPDXAnalysisException when unable to create the SpdxPackage
	 */
	public SpdxPackage(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the SpdxPackage is to be stored
	 * @param objectUri URI or anonymous ID for the SpdxPackage
	 * @param copyManager Copy manager for the SpdxPackage - can be null if copying is not required
	 * @param create true if SpdxPackage is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the SpdxPackage
	 */
	public SpdxPackage(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the SpdxPackage from the builder - used in the builder class
	 * @param builder Builder to create the SpdxPackage from
	 * @throws InvalidSPDXAnalysisException when unable to create the SpdxPackage
	 */
	protected SpdxPackage(SpdxPackageBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setPackageUrl(builder.packageUrl);
		setHomePage(builder.homePage);
		setDownloadLocation(builder.downloadLocation);
		setPackageVersion(builder.packageVersion);
		setSourceInfo(builder.sourceInfo);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Software.SpdxPackage";
	}
	
	// Getters and Setters
	

		/**
	 * @return the packageUrl
	 */
	public Optional<String> getPackageUrl() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_PACKAGE_URL);
	}
	/**
	 * @param packageUrl the packageUrl to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public SpdxPackage setPackageUrl(@Nullable String packageUrl) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_PACKAGE_URL, packageUrl);
		return this;
	}

		/**
	 * @return the homePage
	 */
	public Optional<String> getHomePage() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_HOME_PAGE);
	}
	/**
	 * @param homePage the homePage to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public SpdxPackage setHomePage(@Nullable String homePage) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_HOME_PAGE, homePage);
		return this;
	}

		/**
	 * @return the downloadLocation
	 */
	public Optional<String> getDownloadLocation() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_DOWNLOAD_LOCATION);
	}
	/**
	 * @param downloadLocation the downloadLocation to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public SpdxPackage setDownloadLocation(@Nullable String downloadLocation) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_DOWNLOAD_LOCATION, downloadLocation);
		return this;
	}

		/**
	 * @return the packageVersion
	 */
	public Optional<String> getPackageVersion() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_PACKAGE_VERSION);
	}
	/**
	 * @param packageVersion the packageVersion to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public SpdxPackage setPackageVersion(@Nullable String packageVersion) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_PACKAGE_VERSION, packageVersion);
		return this;
	}

		/**
	 * @return the sourceInfo
	 */
	public Optional<String> getSourceInfo() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_SOURCE_INFO);
	}
	/**
	 * @param sourceInfo the sourceInfo to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public SpdxPackage setSourceInfo(@Nullable String sourceInfo) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SOFTWARE_PROP_SOURCE_INFO, sourceInfo);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "SpdxPackage: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<IndividualUriValue> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<String> packageUrl = getPackageUrl();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting packageUrl for SpdxPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> homePage = getHomePage();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting homePage for SpdxPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> downloadLocation = getDownloadLocation();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting downloadLocation for SpdxPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> packageVersion = getPackageVersion();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting packageVersion for SpdxPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> sourceInfo = getSourceInfo();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting sourceInfo for SpdxPackage: "+e.getMessage());
		}
		return retval;
	}
	
	public static class SpdxPackageBuilder extends SoftwareArtifactBuilder {
	
		/**
		 * Create an SpdxPackageBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public SpdxPackageBuilder(ModelObjectV3 from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous));
		}
	
		/**
		 * Create an SpdxPackageBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public SpdxPackageBuilder(ModelObjectV3 from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a SpdxPackageBuilder
		 * @param modelStore model store for the built SpdxPackage
		 * @param objectUri objectUri for the built SpdxPackage
		 * @param copyManager optional copyManager for the built SpdxPackage
		 */
		public SpdxPackageBuilder(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		String packageUrl = null;
		String homePage = null;
		String downloadLocation = null;
		String packageVersion = null;
		String sourceInfo = null;
		
		
		/**
		 * Sets the initial value of packageUrl
		 * @parameter packageUrl value to set
		 * @return this for chaining
		**/
		public SpdxPackageBuilder setPackageUrl(String packageUrl) {
			this.packageUrl = packageUrl;
			return this;
		}
		
		/**
		 * Sets the initial value of homePage
		 * @parameter homePage value to set
		 * @return this for chaining
		**/
		public SpdxPackageBuilder setHomePage(String homePage) {
			this.homePage = homePage;
			return this;
		}
		
		/**
		 * Sets the initial value of downloadLocation
		 * @parameter downloadLocation value to set
		 * @return this for chaining
		**/
		public SpdxPackageBuilder setDownloadLocation(String downloadLocation) {
			this.downloadLocation = downloadLocation;
			return this;
		}
		
		/**
		 * Sets the initial value of packageVersion
		 * @parameter packageVersion value to set
		 * @return this for chaining
		**/
		public SpdxPackageBuilder setPackageVersion(String packageVersion) {
			this.packageVersion = packageVersion;
			return this;
		}
		
		/**
		 * Sets the initial value of sourceInfo
		 * @parameter sourceInfo value to set
		 * @return this for chaining
		**/
		public SpdxPackageBuilder setSourceInfo(String sourceInfo) {
			this.sourceInfo = sourceInfo;
			return this;
		}
	
		
		/**
		 * @return the SpdxPackage
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public SpdxPackage build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new SpdxPackage(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
