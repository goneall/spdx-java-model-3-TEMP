/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.expandedlicensing;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A License represents a license text, whether listed on the SPDX License List (ListedLicense) 
 * or defined by an SPDX data creator (CustomLicense). 
 */
public class License extends ExtendableLicense  {

	
	/**
	 * Create the License with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the License
	 */
	public License() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the License
	 * @throws InvalidSPDXAnalysisException when unable to create the License
	 */
	public License(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the License is to be stored
	 * @param objectUri URI or anonymous ID for the License
	 * @param copyManager Copy manager for the License - can be null if copying is not required
	 * @param create true if License is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the License
	 */
	public License(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the License from the builder - used in the builder class
	 * @param builder Builder to create the License from
	 * @throws InvalidSPDXAnalysisException when unable to create the License
	 */
	protected License(LicenseBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setIsFsfLibre(builder.isFsfLibre);
		setIsDeprecatedLicenseId(builder.isDeprecatedLicenseId);
		setIsOsiApproved(builder.isOsiApproved);
		setObsoletedBy(builder.obsoletedBy);
		setStandardLicenseHeader(builder.standardLicenseHeader);
		setLicenseText(builder.licenseText);
		setLicenseXml(builder.licenseXml);
		setStandardLicenseTemplate(builder.standardLicenseTemplate);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "ExpandedLicensing.License";
	}
	
	// Getters and Setters
	

		/**
	 * @return the isFsfLibre
	 */
	public Optional<Boolean> getIsFsfLibre() throws InvalidSPDXAnalysisException {
		return getBooleanPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_FSF_LIBRE);
	}
	
	/**
	 * @param isFsfLibre the isFsfLibre to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setIsFsfLibre(@Nullable Boolean isFsfLibre) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_FSF_LIBRE, isFsfLibre);
		return this;
	}

		/**
	 * @return the isDeprecatedLicenseId
	 */
	public Optional<Boolean> getIsDeprecatedLicenseId() throws InvalidSPDXAnalysisException {
		return getBooleanPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_DEPRECATED_LICENSE_ID);
	}
	
	/**
	 * @param isDeprecatedLicenseId the isDeprecatedLicenseId to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setIsDeprecatedLicenseId(@Nullable Boolean isDeprecatedLicenseId) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_DEPRECATED_LICENSE_ID, isDeprecatedLicenseId);
		return this;
	}

		/**
	 * @return the isOsiApproved
	 */
	public Optional<Boolean> getIsOsiApproved() throws InvalidSPDXAnalysisException {
		return getBooleanPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_OSI_APPROVED);
	}
	
	/**
	 * @param isOsiApproved the isOsiApproved to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setIsOsiApproved(@Nullable Boolean isOsiApproved) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_IS_OSI_APPROVED, isOsiApproved);
		return this;
	}

		/**
	 * @return the obsoletedBy
	 */
	public Optional<String> getObsoletedBy() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_OBSOLETED_BY);
	}
	/**
	 * @param obsoletedBy the obsoletedBy to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setObsoletedBy(@Nullable String obsoletedBy) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_OBSOLETED_BY, obsoletedBy);
		return this;
	}

		/**
	 * @return the standardLicenseHeader
	 */
	public Optional<String> getStandardLicenseHeader() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_STANDARD_LICENSE_HEADER);
	}
	/**
	 * @param standardLicenseHeader the standardLicenseHeader to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setStandardLicenseHeader(@Nullable String standardLicenseHeader) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_STANDARD_LICENSE_HEADER, standardLicenseHeader);
		return this;
	}

	/**
	 * @return the licenseText
	 */
	public @Nullable String getLicenseText() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstantsV3.SIMPLE_LICENSING_PROP_LICENSE_TEXT);
		return retval.isPresent() ? retval.get() : null;
	}
		/**
	 * @param licenseText the licenseText to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setLicenseText(@Nullable String licenseText) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(licenseText)) {
			throw new InvalidSPDXAnalysisException("licenseText is a required property");
		}
		setPropertyValue(SpdxConstantsV3.SIMPLE_LICENSING_PROP_LICENSE_TEXT, licenseText);
		return this;
	}

		/**
	 * @return the licenseXml
	 */
	public Optional<String> getLicenseXml() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_LICENSE_XML);
	}
	/**
	 * @param licenseXml the licenseXml to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setLicenseXml(@Nullable String licenseXml) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_LICENSE_XML, licenseXml);
		return this;
	}

		/**
	 * @return the standardLicenseTemplate
	 */
	public Optional<String> getStandardLicenseTemplate() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_STANDARD_LICENSE_TEMPLATE);
	}
	/**
	 * @param standardLicenseTemplate the standardLicenseTemplate to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public License setStandardLicenseTemplate(@Nullable String standardLicenseTemplate) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.EXPANDED_LICENSING_PROP_STANDARD_LICENSE_TEMPLATE, standardLicenseTemplate);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "License: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<Boolean> isFsfLibre = getIsFsfLibre();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting isFsfLibre for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<Boolean> isDeprecatedLicenseId = getIsDeprecatedLicenseId();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting isDeprecatedLicenseId for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<Boolean> isOsiApproved = getIsOsiApproved();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting isOsiApproved for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> obsoletedBy = getObsoletedBy();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting obsoletedBy for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> standardLicenseHeader = getStandardLicenseHeader();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting standardLicenseHeader for License: "+e.getMessage());
		}
		try {
			String licenseText = getLicenseText();
			if (Objects.isNull(licenseText) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.EXPANDED_LICENSING }))) {
				retval.add("Missing licenseText in License");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting licenseText for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> licenseXml = getLicenseXml();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting licenseXml for License: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> standardLicenseTemplate = getStandardLicenseTemplate();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting standardLicenseTemplate for License: "+e.getMessage());
		}
		return retval;
	}
	
	public static class LicenseBuilder extends ExtendableLicenseBuilder {
	
		/**
		 * Create an LicenseBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public LicenseBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an LicenseBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public LicenseBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a LicenseBuilder
		 * @param modelStore model store for the built License
		 * @param objectUri objectUri for the built License
		 * @param copyManager optional copyManager for the built License
		 */
		public LicenseBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Boolean isFsfLibre = null;
		Boolean isDeprecatedLicenseId = null;
		Boolean isOsiApproved = null;
		String obsoletedBy = null;
		String standardLicenseHeader = null;
		String licenseText = null;
		String licenseXml = null;
		String standardLicenseTemplate = null;
		
		
		/**
		 * Sets the initial value of isFsfLibre
		 * @parameter isFsfLibre value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setIsFsfLibre(Boolean isFsfLibre) {
			this.isFsfLibre = isFsfLibre;
			return this;
		}
		
		/**
		 * Sets the initial value of isDeprecatedLicenseId
		 * @parameter isDeprecatedLicenseId value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setIsDeprecatedLicenseId(Boolean isDeprecatedLicenseId) {
			this.isDeprecatedLicenseId = isDeprecatedLicenseId;
			return this;
		}
		
		/**
		 * Sets the initial value of isOsiApproved
		 * @parameter isOsiApproved value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setIsOsiApproved(Boolean isOsiApproved) {
			this.isOsiApproved = isOsiApproved;
			return this;
		}
		
		/**
		 * Sets the initial value of obsoletedBy
		 * @parameter obsoletedBy value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setObsoletedBy(String obsoletedBy) {
			this.obsoletedBy = obsoletedBy;
			return this;
		}
		
		/**
		 * Sets the initial value of standardLicenseHeader
		 * @parameter standardLicenseHeader value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setStandardLicenseHeader(String standardLicenseHeader) {
			this.standardLicenseHeader = standardLicenseHeader;
			return this;
		}
		
		/**
		 * Sets the initial value of licenseText
		 * @parameter licenseText value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setLicenseText(String licenseText) {
			this.licenseText = licenseText;
			return this;
		}
		
		/**
		 * Sets the initial value of licenseXml
		 * @parameter licenseXml value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setLicenseXml(String licenseXml) {
			this.licenseXml = licenseXml;
			return this;
		}
		
		/**
		 * Sets the initial value of standardLicenseTemplate
		 * @parameter standardLicenseTemplate value to set
		 * @return this for chaining
		**/
		public LicenseBuilder setStandardLicenseTemplate(String standardLicenseTemplate) {
			this.standardLicenseTemplate = standardLicenseTemplate;
			return this;
		}
	
		
		/**
		 * @return the License
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public License build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new License(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
