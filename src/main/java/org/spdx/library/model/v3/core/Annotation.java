/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * An Annotation is an assertion made in relation to one or more elements. 
 */
public class Annotation extends Element  {

	Collection<String> contentTypes;
	
	/**
	 * Create the Annotation with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Annotation
	 */
	public Annotation() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Annotation
	 * @throws InvalidSPDXAnalysisException when unable to create the Annotation
	 */
	public Annotation(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Annotation is to be stored
	 * @param objectUri URI or anonymous ID for the Annotation
	 * @param copyManager Copy manager for the Annotation - can be null if copying is not required
	 * @param create true if Annotation is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Annotation
	 */
	 @SuppressWarnings("unchecked")
	public Annotation(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		contentTypes = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_CONTENT_TYPE, String.class);
	}

	/**
	 * Create the Annotation from the builder - used in the builder class
	 * @param builder Builder to create the Annotation from
	 * @throws InvalidSPDXAnalysisException when unable to create the Annotation
	 */
	 @SuppressWarnings("unchecked")
	protected Annotation(AnnotationBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		contentTypes = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.CORE_PROP_CONTENT_TYPE, String.class);
		getContentTypes().addAll(builder.contentTypes);
		setSubject(builder.subject);
		setAnnotationType(builder.annotationType);
		setStatement(builder.statement);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.Annotation";
	}
	
	// Getters and Setters
	public Collection<String> getContentTypes() {
		return contentTypes;
	}
	

	/**
	 * @return the subject
	 */
	 @SuppressWarnings("unchecked")
	public @Nullable Element getSubject() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.CORE_PROP_SUBJECT);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof Element)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Element)(retval.get());
		} else {
			return null;
		}
	}
		
	/**
	 * @param subject the subject to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Annotation setSubject(@Nullable Element subject) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(subject)) {
			throw new InvalidSPDXAnalysisException("subject is a required property");
		}
		setPropertyValue(SpdxConstantsV3.CORE_PROP_SUBJECT, subject);
		return this;
	}
	
	/**
	 * @return the annotationType
	 */
	public @Nullable AnnotationType getAnnotationType() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.CORE_PROP_ANNOTATION_TYPE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof AnnotationType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (AnnotationType)(retval.get());
		} else {
			return null;
		}
	}
	/**
	 * @param annotationType the annotationType to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Annotation setAnnotationType(@Nullable AnnotationType annotationType) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(annotationType)) {
			throw new InvalidSPDXAnalysisException("annotationType is a required property");
		}
		setPropertyValue(SpdxConstantsV3.CORE_PROP_ANNOTATION_TYPE, annotationType);
		return this;
	}

		/**
	 * @return the statement
	 */
	public Optional<String> getStatement() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.CORE_PROP_STATEMENT);
	}
	/**
	 * @param statement the statement to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Annotation setStatement(@Nullable String statement) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.CORE_PROP_STATEMENT, statement);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Annotation: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		Element subject;
		try {
			subject = getSubject();
			if (Objects.nonNull(subject)) {
				retval.addAll(subject.verify(verifiedIds, specVersionForVerify, profiles));
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.CORE }))) {
					retval.add("Missing subject in Annotation");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting subject for Annotation: "+e.getMessage());
		}
		try {
			AnnotationType annotationType = getAnnotationType();
			if (Objects.isNull(annotationType) && 
						Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { ProfileIdentifierType.CORE }))) {
				retval.add("Missing annotationType in Annotation");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting annotationType for Annotation: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> statement = getStatement();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting statement for Annotation: "+e.getMessage());
		}
		return retval;
	}
	
	public static class AnnotationBuilder extends ElementBuilder {
	
		/**
		 * Create an AnnotationBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public AnnotationBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an AnnotationBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public AnnotationBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a AnnotationBuilder
		 * @param modelStore model store for the built Annotation
		 * @param objectUri objectUri for the built Annotation
		 * @param copyManager optional copyManager for the built Annotation
		 */
		public AnnotationBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<String> contentTypes = new ArrayList<>();
		Element subject = null;
		AnnotationType annotationType = null;
		String statement = null;
		
		
		/**
		 * Adds a contentType to the initial collection
		 * @parameter contentType contentType to add
		 * @return this for chaining
		**/
		public AnnotationBuilder addContentType(String contentType) {
			if (Objects.nonNull(contentType)) {
				contentTypes.add(contentType);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial contentType collection
		 * @parameter contentTypeCollection collection to initialize the contentType
		 * @return this for chaining
		**/
		public AnnotationBuilder addAllContentType(Collection<String> contentTypeCollection) {
			if (Objects.nonNull(contentTypeCollection)) {
				contentTypes.addAll(contentTypeCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of subject
		 * @parameter subject value to set
		 * @return this for chaining
		**/
		public AnnotationBuilder setSubject(Element subject) {
			this.subject = subject;
			return this;
		}
		
		/**
		 * Sets the initial value of annotationType
		 * @parameter annotationType value to set
		 * @return this for chaining
		**/
		public AnnotationBuilder setAnnotationType(AnnotationType annotationType) {
			this.annotationType = annotationType;
			return this;
		}
		
		/**
		 * Sets the initial value of statement
		 * @parameter statement value to set
		 * @return this for chaining
		**/
		public AnnotationBuilder setStatement(String statement) {
			this.statement = statement;
			return this;
		}
	
		
		/**
		 * @return the Annotation
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Annotation build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Annotation(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
