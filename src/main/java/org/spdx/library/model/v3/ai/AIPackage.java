/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.ai;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Collection;
import java.util.Objects;
import java.util.Optional;

import org.spdx.core.DefaultModelStore;
import org.spdx.core.IModelCopyManager;
import org.spdx.core.IndividualUriValue;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.library.model.v3.ModelObjectV3;
import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.DictionaryEntry;
import org.spdx.library.model.v3.core.PresenceType;
import org.spdx.library.model.v3.software.SpdxPackage;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * Metadata information that can be added to a package to describe an AI application 
 * or trained AI model. External property restriction on /Core/Artifact/suppliedBy: 
 * minCount: 1 External property restriction on /Software/Package/downloadLocation: 
 * minCount: 1 External property restriction on /Software/Package/packageVersion: 
 * minCount: 1 External property restriction on /Software/SoftwareArtifact/primaryPurpose: 
 * minCount: 1 External property restriction on /Core/Artifact/releaseTime: minCount: 
 * 1 
 */
public class AIPackage extends SpdxPackage  {

	Collection<DictionaryEntry> metrics;
	Collection<DictionaryEntry> metricDecisionThresholds;
	Collection<DictionaryEntry> hyperparameters;
	Collection<String> domains;
	Collection<String> standardCompliances;
	Collection<String> modelExplainabilitys;
	Collection<String> typeOfModels;
	Collection<String> modelDataPreprocessings;
	
	/**
	 * Create the AIPackage with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the AIPackage
	 */
	public AIPackage() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous));
	}

	/**
	 * @param objectUri URI or anonymous ID for the AIPackage
	 * @throws InvalidSPDXAnalysisException when unable to create the AIPackage
	 */
	public AIPackage(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the AIPackage is to be stored
	 * @param objectUri URI or anonymous ID for the AIPackage
	 * @param copyManager Copy manager for the AIPackage - can be null if copying is not required
	 * @param create true if AIPackage is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the AIPackage
	 */
	 @SuppressWarnings("unchecked")
	public AIPackage(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		metrics = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_METRIC, DictionaryEntry.class);
		metricDecisionThresholds = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_METRIC_DECISION_THRESHOLD, DictionaryEntry.class);
		hyperparameters = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_HYPERPARAMETER, DictionaryEntry.class);
		domains = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_DOMAIN, String.class);
		standardCompliances = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_STANDARD_COMPLIANCE, String.class);
		modelExplainabilitys = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_MODEL_EXPLAINABILITY, String.class);
		typeOfModels = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_TYPE_OF_MODEL, String.class);
		modelDataPreprocessings = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_MODEL_DATA_PREPROCESSING, String.class);
	}

	/**
	 * Create the AIPackage from the builder - used in the builder class
	 * @param builder Builder to create the AIPackage from
	 * @throws InvalidSPDXAnalysisException when unable to create the AIPackage
	 */
	 @SuppressWarnings("unchecked")
	protected AIPackage(AIPackageBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		metrics = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_METRIC, DictionaryEntry.class);
		metricDecisionThresholds = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_METRIC_DECISION_THRESHOLD, DictionaryEntry.class);
		hyperparameters = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_HYPERPARAMETER, DictionaryEntry.class);
		domains = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_DOMAIN, String.class);
		standardCompliances = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_STANDARD_COMPLIANCE, String.class);
		modelExplainabilitys = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_MODEL_EXPLAINABILITY, String.class);
		typeOfModels = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_TYPE_OF_MODEL, String.class);
		modelDataPreprocessings = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.A_I_PROP_MODEL_DATA_PREPROCESSING, String.class);
		getMetrics().addAll(builder.metrics);
		getMetricDecisionThresholds().addAll(builder.metricDecisionThresholds);
		getHyperparameters().addAll(builder.hyperparameters);
		getDomains().addAll(builder.domains);
		getStandardCompliances().addAll(builder.standardCompliances);
		getModelExplainabilitys().addAll(builder.modelExplainabilitys);
		getTypeOfModels().addAll(builder.typeOfModels);
		getModelDataPreprocessings().addAll(builder.modelDataPreprocessings);
		setSafetyRiskAssessment(builder.safetyRiskAssessment);
		setAutonomyType(builder.autonomyType);
		setSensitivePersonalInformation(builder.sensitivePersonalInformation);
		setLimitation(builder.limitation);
		setInformationAboutApplication(builder.informationAboutApplication);
		setInformationAboutTraining(builder.informationAboutTraining);
		setEnergyConsumption(builder.energyConsumption);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "AI.AIPackage";
	}
	
	// Getters and Setters
	public Collection<DictionaryEntry> getMetrics() {
		return metrics;
	}
	public Collection<DictionaryEntry> getMetricDecisionThresholds() {
		return metricDecisionThresholds;
	}
	public Collection<DictionaryEntry> getHyperparameters() {
		return hyperparameters;
	}
	public Collection<String> getDomains() {
		return domains;
	}
	public Collection<String> getStandardCompliances() {
		return standardCompliances;
	}
	public Collection<String> getModelExplainabilitys() {
		return modelExplainabilitys;
	}
	public Collection<String> getTypeOfModels() {
		return typeOfModels;
	}
	public Collection<String> getModelDataPreprocessings() {
		return modelDataPreprocessings;
	}
	
	
	/**
	 * @return the safetyRiskAssessment
	 */
	 @SuppressWarnings("unchecked")
	public Optional<SafetyRiskAssessmentType> getSafetyRiskAssessment() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.A_I_PROP_SAFETY_RISK_ASSESSMENT);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof SafetyRiskAssessmentType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<SafetyRiskAssessmentType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param safetyRiskAssessment the safetyRiskAssessment to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setSafetyRiskAssessment(@Nullable SafetyRiskAssessmentType safetyRiskAssessment) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_SAFETY_RISK_ASSESSMENT, safetyRiskAssessment);
		return this;
	}
	
	/**
	 * @return the autonomyType
	 */
	 @SuppressWarnings("unchecked")
	public Optional<PresenceType> getAutonomyType() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.A_I_PROP_AUTONOMY_TYPE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof PresenceType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<PresenceType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param autonomyType the autonomyType to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setAutonomyType(@Nullable PresenceType autonomyType) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_AUTONOMY_TYPE, autonomyType);
		return this;
	}
	
	/**
	 * @return the sensitivePersonalInformation
	 */
	 @SuppressWarnings("unchecked")
	public Optional<PresenceType> getSensitivePersonalInformation() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.A_I_PROP_SENSITIVE_PERSONAL_INFORMATION);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof PresenceType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<PresenceType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param sensitivePersonalInformation the sensitivePersonalInformation to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setSensitivePersonalInformation(@Nullable PresenceType sensitivePersonalInformation) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_SENSITIVE_PERSONAL_INFORMATION, sensitivePersonalInformation);
		return this;
	}

		/**
	 * @return the limitation
	 */
	public Optional<String> getLimitation() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.A_I_PROP_LIMITATION);
	}
	/**
	 * @param limitation the limitation to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setLimitation(@Nullable String limitation) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_LIMITATION, limitation);
		return this;
	}

		/**
	 * @return the informationAboutApplication
	 */
	public Optional<String> getInformationAboutApplication() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.A_I_PROP_INFORMATION_ABOUT_APPLICATION);
	}
	/**
	 * @param informationAboutApplication the informationAboutApplication to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setInformationAboutApplication(@Nullable String informationAboutApplication) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_INFORMATION_ABOUT_APPLICATION, informationAboutApplication);
		return this;
	}

		/**
	 * @return the informationAboutTraining
	 */
	public Optional<String> getInformationAboutTraining() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.A_I_PROP_INFORMATION_ABOUT_TRAINING);
	}
	/**
	 * @param informationAboutTraining the informationAboutTraining to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setInformationAboutTraining(@Nullable String informationAboutTraining) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_INFORMATION_ABOUT_TRAINING, informationAboutTraining);
		return this;
	}

		/**
	 * @return the energyConsumption
	 */
	public Optional<String> getEnergyConsumption() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.A_I_PROP_ENERGY_CONSUMPTION);
	}
	/**
	 * @param energyConsumption the energyConsumption to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public AIPackage setEnergyConsumption(@Nullable String energyConsumption) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.A_I_PROP_ENERGY_CONSUMPTION, energyConsumption);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "AIPackage: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<IndividualUriValue> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<SafetyRiskAssessmentType> safetyRiskAssessment = getSafetyRiskAssessment();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting safetyRiskAssessment for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<PresenceType> autonomyType = getAutonomyType();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting autonomyType for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<PresenceType> sensitivePersonalInformation = getSensitivePersonalInformation();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting sensitivePersonalInformation for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> limitation = getLimitation();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting limitation for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> informationAboutApplication = getInformationAboutApplication();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting informationAboutApplication for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> informationAboutTraining = getInformationAboutTraining();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting informationAboutTraining for AIPackage: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> energyConsumption = getEnergyConsumption();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting energyConsumption for AIPackage: "+e.getMessage());
		}
		for (DictionaryEntry metric:metrics) {
			retval.addAll(metric.verify(verifiedIds, specVersionForVerify, profiles));
		}
		for (DictionaryEntry metricDecisionThreshold:metricDecisionThresholds) {
			retval.addAll(metricDecisionThreshold.verify(verifiedIds, specVersionForVerify, profiles));
		}
		for (DictionaryEntry hyperparameter:hyperparameters) {
			retval.addAll(hyperparameter.verify(verifiedIds, specVersionForVerify, profiles));
		}
		return retval;
	}
	
	public static class AIPackageBuilder extends SpdxPackageBuilder {
	
		/**
		 * Create an AIPackageBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public AIPackageBuilder(ModelObjectV3 from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous));
		}
	
		/**
		 * Create an AIPackageBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public AIPackageBuilder(ModelObjectV3 from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a AIPackageBuilder
		 * @param modelStore model store for the built AIPackage
		 * @param objectUri objectUri for the built AIPackage
		 * @param copyManager optional copyManager for the built AIPackage
		 */
		public AIPackageBuilder(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<DictionaryEntry> metrics = new ArrayList<>();
		Collection<DictionaryEntry> metricDecisionThresholds = new ArrayList<>();
		Collection<DictionaryEntry> hyperparameters = new ArrayList<>();
		Collection<String> domains = new ArrayList<>();
		Collection<String> standardCompliances = new ArrayList<>();
		Collection<String> modelExplainabilitys = new ArrayList<>();
		Collection<String> typeOfModels = new ArrayList<>();
		Collection<String> modelDataPreprocessings = new ArrayList<>();
		SafetyRiskAssessmentType safetyRiskAssessment = null;
		PresenceType autonomyType = null;
		PresenceType sensitivePersonalInformation = null;
		String limitation = null;
		String informationAboutApplication = null;
		String informationAboutTraining = null;
		String energyConsumption = null;
		
		
		/**
		 * Adds a metric to the initial collection
		 * @parameter metric metric to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addMetric(DictionaryEntry metric) {
			if (Objects.nonNull(metric)) {
				metrics.add(metric);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial metric collection
		 * @parameter metricCollection collection to initialize the metric
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllMetric(Collection<DictionaryEntry> metricCollection) {
			if (Objects.nonNull(metricCollection)) {
				metrics.addAll(metricCollection);
			}
			return this;
		}
		
		/**
		 * Adds a metricDecisionThreshold to the initial collection
		 * @parameter metricDecisionThreshold metricDecisionThreshold to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addMetricDecisionThreshold(DictionaryEntry metricDecisionThreshold) {
			if (Objects.nonNull(metricDecisionThreshold)) {
				metricDecisionThresholds.add(metricDecisionThreshold);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial metricDecisionThreshold collection
		 * @parameter metricDecisionThresholdCollection collection to initialize the metricDecisionThreshold
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllMetricDecisionThreshold(Collection<DictionaryEntry> metricDecisionThresholdCollection) {
			if (Objects.nonNull(metricDecisionThresholdCollection)) {
				metricDecisionThresholds.addAll(metricDecisionThresholdCollection);
			}
			return this;
		}
		
		/**
		 * Adds a hyperparameter to the initial collection
		 * @parameter hyperparameter hyperparameter to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addHyperparameter(DictionaryEntry hyperparameter) {
			if (Objects.nonNull(hyperparameter)) {
				hyperparameters.add(hyperparameter);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial hyperparameter collection
		 * @parameter hyperparameterCollection collection to initialize the hyperparameter
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllHyperparameter(Collection<DictionaryEntry> hyperparameterCollection) {
			if (Objects.nonNull(hyperparameterCollection)) {
				hyperparameters.addAll(hyperparameterCollection);
			}
			return this;
		}
		
		/**
		 * Adds a domain to the initial collection
		 * @parameter domain domain to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addDomain(String domain) {
			if (Objects.nonNull(domain)) {
				domains.add(domain);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial domain collection
		 * @parameter domainCollection collection to initialize the domain
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllDomain(Collection<String> domainCollection) {
			if (Objects.nonNull(domainCollection)) {
				domains.addAll(domainCollection);
			}
			return this;
		}
		
		/**
		 * Adds a standardCompliance to the initial collection
		 * @parameter standardCompliance standardCompliance to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addStandardCompliance(String standardCompliance) {
			if (Objects.nonNull(standardCompliance)) {
				standardCompliances.add(standardCompliance);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial standardCompliance collection
		 * @parameter standardComplianceCollection collection to initialize the standardCompliance
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllStandardCompliance(Collection<String> standardComplianceCollection) {
			if (Objects.nonNull(standardComplianceCollection)) {
				standardCompliances.addAll(standardComplianceCollection);
			}
			return this;
		}
		
		/**
		 * Adds a modelExplainability to the initial collection
		 * @parameter modelExplainability modelExplainability to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addModelExplainability(String modelExplainability) {
			if (Objects.nonNull(modelExplainability)) {
				modelExplainabilitys.add(modelExplainability);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial modelExplainability collection
		 * @parameter modelExplainabilityCollection collection to initialize the modelExplainability
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllModelExplainability(Collection<String> modelExplainabilityCollection) {
			if (Objects.nonNull(modelExplainabilityCollection)) {
				modelExplainabilitys.addAll(modelExplainabilityCollection);
			}
			return this;
		}
		
		/**
		 * Adds a typeOfModel to the initial collection
		 * @parameter typeOfModel typeOfModel to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addTypeOfModel(String typeOfModel) {
			if (Objects.nonNull(typeOfModel)) {
				typeOfModels.add(typeOfModel);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial typeOfModel collection
		 * @parameter typeOfModelCollection collection to initialize the typeOfModel
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllTypeOfModel(Collection<String> typeOfModelCollection) {
			if (Objects.nonNull(typeOfModelCollection)) {
				typeOfModels.addAll(typeOfModelCollection);
			}
			return this;
		}
		
		/**
		 * Adds a modelDataPreprocessing to the initial collection
		 * @parameter modelDataPreprocessing modelDataPreprocessing to add
		 * @return this for chaining
		**/
		public AIPackageBuilder addModelDataPreprocessing(String modelDataPreprocessing) {
			if (Objects.nonNull(modelDataPreprocessing)) {
				modelDataPreprocessings.add(modelDataPreprocessing);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial modelDataPreprocessing collection
		 * @parameter modelDataPreprocessingCollection collection to initialize the modelDataPreprocessing
		 * @return this for chaining
		**/
		public AIPackageBuilder addAllModelDataPreprocessing(Collection<String> modelDataPreprocessingCollection) {
			if (Objects.nonNull(modelDataPreprocessingCollection)) {
				modelDataPreprocessings.addAll(modelDataPreprocessingCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of safetyRiskAssessment
		 * @parameter safetyRiskAssessment value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setSafetyRiskAssessment(SafetyRiskAssessmentType safetyRiskAssessment) {
			this.safetyRiskAssessment = safetyRiskAssessment;
			return this;
		}
		
		/**
		 * Sets the initial value of autonomyType
		 * @parameter autonomyType value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setAutonomyType(PresenceType autonomyType) {
			this.autonomyType = autonomyType;
			return this;
		}
		
		/**
		 * Sets the initial value of sensitivePersonalInformation
		 * @parameter sensitivePersonalInformation value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setSensitivePersonalInformation(PresenceType sensitivePersonalInformation) {
			this.sensitivePersonalInformation = sensitivePersonalInformation;
			return this;
		}
		
		/**
		 * Sets the initial value of limitation
		 * @parameter limitation value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setLimitation(String limitation) {
			this.limitation = limitation;
			return this;
		}
		
		/**
		 * Sets the initial value of informationAboutApplication
		 * @parameter informationAboutApplication value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setInformationAboutApplication(String informationAboutApplication) {
			this.informationAboutApplication = informationAboutApplication;
			return this;
		}
		
		/**
		 * Sets the initial value of informationAboutTraining
		 * @parameter informationAboutTraining value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setInformationAboutTraining(String informationAboutTraining) {
			this.informationAboutTraining = informationAboutTraining;
			return this;
		}
		
		/**
		 * Sets the initial value of energyConsumption
		 * @parameter energyConsumption value to set
		 * @return this for chaining
		**/
		public AIPackageBuilder setEnergyConsumption(String energyConsumption) {
			this.energyConsumption = energyConsumption;
			return this;
		}
	
		
		/**
		 * @return the AIPackage
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public AIPackage build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new AIPackage(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
