/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.dataset;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.DictionaryEntry;
import org.spdx.library.model.v3.core.PresenceType;
import org.spdx.library.model.v3.core.ProfileIdentifierType;
import org.spdx.library.model.v3.software.SpdxPackage;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * Metadata information that can be added to a dataset that may be used in a software or 
 * to train/test an AI package. External property restriction on /Core/Artifact/originatedBy: 
 * minCount: 1 External property restriction on /Software/Package/downloadLocation: 
 * minCount: 1 External property restriction on /Software/SoftwareArtifact/primaryPurpose: 
 * minCount: 1 External property restriction on /Core/Artifact/releaseTime: minCount: 
 * 1 External property restriction on /Core/Artifact/builtTime: minCount: 1 
 */
public class Dataset extends SpdxPackage  {

	Collection<DictionaryEntry> sensors;
	Collection<String> anonymizationMethodUseds;
	Collection<String> knownBiass;
	Collection<String> dataPreprocessings;
	Collection<DatasetType> datasetTypes;
	
	/**
	 * Create the Dataset with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Dataset
	 */
	public Dataset() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Dataset
	 * @throws InvalidSPDXAnalysisException when unable to create the Dataset
	 */
	public Dataset(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Dataset is to be stored
	 * @param objectUri URI or anonymous ID for the Dataset
	 * @param copyManager Copy manager for the Dataset - can be null if copying is not required
	 * @param create true if Dataset is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Dataset
	 */
	 @SuppressWarnings("unchecked")
	public Dataset(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		sensors = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_SENSOR, DictionaryEntry.class);
		datasetTypes = (Collection<DatasetType>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_DATASET_TYPE, DatasetType.class);
		anonymizationMethodUseds = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_ANONYMIZATION_METHOD_USED, String.class);
		knownBiass = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_KNOWN_BIAS, String.class);
		dataPreprocessings = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_DATA_PREPROCESSING, String.class);
	}

	/**
	 * Create the Dataset from the builder - used in the builder class
	 * @param builder Builder to create the Dataset from
	 * @throws InvalidSPDXAnalysisException when unable to create the Dataset
	 */
	 @SuppressWarnings("unchecked")
	protected Dataset(DatasetBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		sensors = (Collection<DictionaryEntry>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_SENSOR, DictionaryEntry.class);
		datasetTypes = (Collection<DatasetType>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_DATASET_TYPE, DatasetType.class);
		anonymizationMethodUseds = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_ANONYMIZATION_METHOD_USED, String.class);
		knownBiass = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_KNOWN_BIAS, String.class);
		dataPreprocessings = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.DATASET_PROP_DATA_PREPROCESSING, String.class);
		getSensors().addAll(builder.sensors);
		getDatasetTypes().addAll(builder.datasetTypes);
		getAnonymizationMethodUseds().addAll(builder.anonymizationMethodUseds);
		getKnownBiass().addAll(builder.knownBiass);
		getDataPreprocessings().addAll(builder.dataPreprocessings);
		setSensitivePersonalInformation(builder.sensitivePersonalInformation);
		setDatasetAvailability(builder.datasetAvailability);
		setConfidentialityLevel(builder.confidentialityLevel);
		setDatasetSize(builder.datasetSize);
		setDatasetUpdateMechanism(builder.datasetUpdateMechanism);
		setDataCollectionProcess(builder.dataCollectionProcess);
		setIntendedUse(builder.intendedUse);
		setDatasetNoise(builder.datasetNoise);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Dataset.Dataset";
	}
	
	// Getters and Setters
	public Collection<DictionaryEntry> getSensors() {
		return sensors;
	}
	public Collection<DatasetType> getDatasetTypes() {
		return datasetTypes;
	}
	public Collection<String> getAnonymizationMethodUseds() {
		return anonymizationMethodUseds;
	}
	public Collection<String> getKnownBiass() {
		return knownBiass;
	}
	public Collection<String> getDataPreprocessings() {
		return dataPreprocessings;
	}
	
	
	/**
	 * @return the sensitivePersonalInformation
	 */
	 @SuppressWarnings("unchecked")
	public Optional<PresenceType> getSensitivePersonalInformation() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.DATASET_PROP_SENSITIVE_PERSONAL_INFORMATION);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof PresenceType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<PresenceType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param sensitivePersonalInformation the sensitivePersonalInformation to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setSensitivePersonalInformation(@Nullable PresenceType sensitivePersonalInformation) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_SENSITIVE_PERSONAL_INFORMATION, sensitivePersonalInformation);
		return this;
	}
	
	/**
	 * @return the datasetAvailability
	 */
	 @SuppressWarnings("unchecked")
	public Optional<DatasetAvailabilityType> getDatasetAvailability() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_AVAILABILITY);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof DatasetAvailabilityType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<DatasetAvailabilityType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param datasetAvailability the datasetAvailability to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setDatasetAvailability(@Nullable DatasetAvailabilityType datasetAvailability) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_AVAILABILITY, datasetAvailability);
		return this;
	}
	
	/**
	 * @return the confidentialityLevel
	 */
	 @SuppressWarnings("unchecked")
	public Optional<ConfidentialityLevelType> getConfidentialityLevel() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.DATASET_PROP_CONFIDENTIALITY_LEVEL);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof ConfidentialityLevelType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<ConfidentialityLevelType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param confidentialityLevel the confidentialityLevel to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setConfidentialityLevel(@Nullable ConfidentialityLevelType confidentialityLevel) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_CONFIDENTIALITY_LEVEL, confidentialityLevel);
		return this;
	}
	
	/**
	 * @return the datasetSize
	 */
	public Optional<Integer> getDatasetSize() throws InvalidSPDXAnalysisException {
		return getIntegerPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_SIZE);
	}
	
	/**
	 * @param datasetSize the datasetSize to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setDatasetSize(@Nullable Integer datasetSize) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.nonNull(datasetSize) && datasetSize < 0) {
			throw new InvalidSPDXAnalysisException("datasetSize value " + datasetSize + " is less than the minimum 0 in Dataset");
		}
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_SIZE, datasetSize);
		return this;
	}

		/**
	 * @return the datasetUpdateMechanism
	 */
	public Optional<String> getDatasetUpdateMechanism() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_UPDATE_MECHANISM);
	}
	/**
	 * @param datasetUpdateMechanism the datasetUpdateMechanism to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setDatasetUpdateMechanism(@Nullable String datasetUpdateMechanism) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_UPDATE_MECHANISM, datasetUpdateMechanism);
		return this;
	}

		/**
	 * @return the dataCollectionProcess
	 */
	public Optional<String> getDataCollectionProcess() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.DATASET_PROP_DATA_COLLECTION_PROCESS);
	}
	/**
	 * @param dataCollectionProcess the dataCollectionProcess to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setDataCollectionProcess(@Nullable String dataCollectionProcess) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_DATA_COLLECTION_PROCESS, dataCollectionProcess);
		return this;
	}

		/**
	 * @return the intendedUse
	 */
	public Optional<String> getIntendedUse() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.DATASET_PROP_INTENDED_USE);
	}
	/**
	 * @param intendedUse the intendedUse to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setIntendedUse(@Nullable String intendedUse) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_INTENDED_USE, intendedUse);
		return this;
	}

		/**
	 * @return the datasetNoise
	 */
	public Optional<String> getDatasetNoise() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_NOISE);
	}
	/**
	 * @param datasetNoise the datasetNoise to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Dataset setDatasetNoise(@Nullable String datasetNoise) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.DATASET_PROP_DATASET_NOISE, datasetNoise);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Dataset: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<PresenceType> sensitivePersonalInformation = getSensitivePersonalInformation();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting sensitivePersonalInformation for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<DatasetAvailabilityType> datasetAvailability = getDatasetAvailability();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting datasetAvailability for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<ConfidentialityLevelType> confidentialityLevel = getConfidentialityLevel();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting confidentialityLevel for Dataset: "+e.getMessage());
		}
		try {
			Optional<Integer> datasetSize = getDatasetSize();
			if (datasetSize.isPresent() && datasetSize.get() < 0) {
				retval.add("datasetSize value " + datasetSize.get() + " is less than the minimum 0 in Dataset");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting datasetSize for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> datasetUpdateMechanism = getDatasetUpdateMechanism();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting datasetUpdateMechanism for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> dataCollectionProcess = getDataCollectionProcess();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting dataCollectionProcess for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> intendedUse = getIntendedUse();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting intendedUse for Dataset: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> datasetNoise = getDatasetNoise();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting datasetNoise for Dataset: "+e.getMessage());
		}
		for (DictionaryEntry sensor:sensors) {
			retval.addAll(sensor.verify(verifiedIds, specVersionForVerify, profiles));
		}
		return retval;
	}
	
	public static class DatasetBuilder extends SpdxPackageBuilder {
	
		/**
		 * Create an DatasetBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public DatasetBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an DatasetBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public DatasetBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a DatasetBuilder
		 * @param modelStore model store for the built Dataset
		 * @param objectUri objectUri for the built Dataset
		 * @param copyManager optional copyManager for the built Dataset
		 */
		public DatasetBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<DictionaryEntry> sensors = new ArrayList<>();
		Collection<DatasetType> datasetTypes = new ArrayList<>();
		Collection<String> anonymizationMethodUseds = new ArrayList<>();
		Collection<String> knownBiass = new ArrayList<>();
		Collection<String> dataPreprocessings = new ArrayList<>();
		PresenceType sensitivePersonalInformation = null;
		DatasetAvailabilityType datasetAvailability = null;
		ConfidentialityLevelType confidentialityLevel = null;
		Integer datasetSize = null;
		String datasetUpdateMechanism = null;
		String dataCollectionProcess = null;
		String intendedUse = null;
		String datasetNoise = null;
		
		
		/**
		 * Adds a sensor to the initial collection
		 * @parameter sensor sensor to add
		 * @return this for chaining
		**/
		public DatasetBuilder addSensor(DictionaryEntry sensor) {
			if (Objects.nonNull(sensor)) {
				sensors.add(sensor);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial sensor collection
		 * @parameter sensorCollection collection to initialize the sensor
		 * @return this for chaining
		**/
		public DatasetBuilder addAllSensor(Collection<DictionaryEntry> sensorCollection) {
			if (Objects.nonNull(sensorCollection)) {
				sensors.addAll(sensorCollection);
			}
			return this;
		}
		
		/**
		 * Adds a datasetType to the initial collection
		 * @parameter datasetType datasetType to add
		 * @return this for chaining
		**/
		public DatasetBuilder addDatasetType(DatasetType datasetType) {
			if (Objects.nonNull(datasetType)) {
				datasetTypes.add(datasetType);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial datasetType collection
		 * @parameter datasetTypeCollection collection to initialize the datasetType
		 * @return this for chaining
		**/
		public DatasetBuilder addAllDatasetType(Collection<DatasetType> datasetTypeCollection) {
			if (Objects.nonNull(datasetTypeCollection)) {
				datasetTypes.addAll(datasetTypeCollection);
			}
			return this;
		}
		
		/**
		 * Adds a anonymizationMethodUsed to the initial collection
		 * @parameter anonymizationMethodUsed anonymizationMethodUsed to add
		 * @return this for chaining
		**/
		public DatasetBuilder addAnonymizationMethodUsed(String anonymizationMethodUsed) {
			if (Objects.nonNull(anonymizationMethodUsed)) {
				anonymizationMethodUseds.add(anonymizationMethodUsed);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial anonymizationMethodUsed collection
		 * @parameter anonymizationMethodUsedCollection collection to initialize the anonymizationMethodUsed
		 * @return this for chaining
		**/
		public DatasetBuilder addAllAnonymizationMethodUsed(Collection<String> anonymizationMethodUsedCollection) {
			if (Objects.nonNull(anonymizationMethodUsedCollection)) {
				anonymizationMethodUseds.addAll(anonymizationMethodUsedCollection);
			}
			return this;
		}
		
		/**
		 * Adds a knownBias to the initial collection
		 * @parameter knownBias knownBias to add
		 * @return this for chaining
		**/
		public DatasetBuilder addKnownBias(String knownBias) {
			if (Objects.nonNull(knownBias)) {
				knownBiass.add(knownBias);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial knownBias collection
		 * @parameter knownBiasCollection collection to initialize the knownBias
		 * @return this for chaining
		**/
		public DatasetBuilder addAllKnownBias(Collection<String> knownBiasCollection) {
			if (Objects.nonNull(knownBiasCollection)) {
				knownBiass.addAll(knownBiasCollection);
			}
			return this;
		}
		
		/**
		 * Adds a dataPreprocessing to the initial collection
		 * @parameter dataPreprocessing dataPreprocessing to add
		 * @return this for chaining
		**/
		public DatasetBuilder addDataPreprocessing(String dataPreprocessing) {
			if (Objects.nonNull(dataPreprocessing)) {
				dataPreprocessings.add(dataPreprocessing);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial dataPreprocessing collection
		 * @parameter dataPreprocessingCollection collection to initialize the dataPreprocessing
		 * @return this for chaining
		**/
		public DatasetBuilder addAllDataPreprocessing(Collection<String> dataPreprocessingCollection) {
			if (Objects.nonNull(dataPreprocessingCollection)) {
				dataPreprocessings.addAll(dataPreprocessingCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of sensitivePersonalInformation
		 * @parameter sensitivePersonalInformation value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setSensitivePersonalInformation(PresenceType sensitivePersonalInformation) {
			this.sensitivePersonalInformation = sensitivePersonalInformation;
			return this;
		}
		
		/**
		 * Sets the initial value of datasetAvailability
		 * @parameter datasetAvailability value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setDatasetAvailability(DatasetAvailabilityType datasetAvailability) {
			this.datasetAvailability = datasetAvailability;
			return this;
		}
		
		/**
		 * Sets the initial value of confidentialityLevel
		 * @parameter confidentialityLevel value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setConfidentialityLevel(ConfidentialityLevelType confidentialityLevel) {
			this.confidentialityLevel = confidentialityLevel;
			return this;
		}
		
		/**
		 * Sets the initial value of datasetSize
		 * @parameter datasetSize value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setDatasetSize(Integer datasetSize) {
			this.datasetSize = datasetSize;
			return this;
		}
		
		/**
		 * Sets the initial value of datasetUpdateMechanism
		 * @parameter datasetUpdateMechanism value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setDatasetUpdateMechanism(String datasetUpdateMechanism) {
			this.datasetUpdateMechanism = datasetUpdateMechanism;
			return this;
		}
		
		/**
		 * Sets the initial value of dataCollectionProcess
		 * @parameter dataCollectionProcess value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setDataCollectionProcess(String dataCollectionProcess) {
			this.dataCollectionProcess = dataCollectionProcess;
			return this;
		}
		
		/**
		 * Sets the initial value of intendedUse
		 * @parameter intendedUse value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setIntendedUse(String intendedUse) {
			this.intendedUse = intendedUse;
			return this;
		}
		
		/**
		 * Sets the initial value of datasetNoise
		 * @parameter datasetNoise value to set
		 * @return this for chaining
		**/
		public DatasetBuilder setDatasetNoise(String datasetNoise) {
			this.datasetNoise = datasetNoise;
			return this;
		}
	
		
		/**
		 * @return the Dataset
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Dataset build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Dataset(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
