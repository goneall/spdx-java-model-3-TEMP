/**
 * Copyright (c) 2024 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.security;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Optional;

import org.spdx.library.model.v3.SpdxConstantsV3;
import org.spdx.library.model.v3.core.ProfileIdentifierType;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * VexNotAffectedVulnAssessmentRelationship connects a vulnerability and a number 
 * of elements designating them as products not affected by the vulnerability. This 
 * relationship corresponds to the VEX not_affected status. **Constraints** When 
 * linking elements using a VexNotVulnAffectedAssessmentRelationship, the following 
 * requirements must be observed: * Relating elements with a VexNotAffectedVulnAssessmentRelationship 
 * is restricted to the doesNotAffect relationship type. * The from: end of the relationship 
 * must be a /Security/Vulnerability classed element. * Both impactStatement and 
 * justificationType properties have a cardinality of 0..1 making them optional. 
 * Nevertheless, to produce a valid VEX not_affected statement, one of them MUST be 
 * defined. This is specified in the Minimum Elements for VEX. **Syntax** ```json { 
 * "@type": "VexNotAffectedVulnAssessmentRelationship", "@id": "urn:spdx.dev:vex-not-affected-1", 
 * "relationshipType": "doesNotAffect", "from": "urn:spdx.dev:vuln-cve-2020-28498", 
 * "to": ["urn:product-acme-application-1.3"], "assessedElement": "urn:npm-elliptic-6.5.2", 
 * "justificationType": "componentNotPresent", "impactStatement": "Not using 
 * this vulnerable part of this library.", "suppliedBy": ["urn:spdx.dev:agent-jane-doe"], 
 * "publishedTime": "2021-03-09T11:04:53Z" } ``` 
 */
public class VexNotAffectedVulnAssessmentRelationship extends VexVulnAssessmentRelationship  {

	
	/**
	 * Create the VexNotAffectedVulnAssessmentRelationship with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the VexNotAffectedVulnAssessmentRelationship
	 */
	public VexNotAffectedVulnAssessmentRelationship() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the VexNotAffectedVulnAssessmentRelationship
	 * @throws InvalidSPDXAnalysisException when unable to create the VexNotAffectedVulnAssessmentRelationship
	 */
	public VexNotAffectedVulnAssessmentRelationship(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the VexNotAffectedVulnAssessmentRelationship is to be stored
	 * @param objectUri URI or anonymous ID for the VexNotAffectedVulnAssessmentRelationship
	 * @param copyManager Copy manager for the VexNotAffectedVulnAssessmentRelationship - can be null if copying is not required
	 * @param create true if VexNotAffectedVulnAssessmentRelationship is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the VexNotAffectedVulnAssessmentRelationship
	 */
	public VexNotAffectedVulnAssessmentRelationship(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the VexNotAffectedVulnAssessmentRelationship from the builder - used in the builder class
	 * @param builder Builder to create the VexNotAffectedVulnAssessmentRelationship from
	 * @throws InvalidSPDXAnalysisException when unable to create the VexNotAffectedVulnAssessmentRelationship
	 */
	protected VexNotAffectedVulnAssessmentRelationship(VexNotAffectedVulnAssessmentRelationshipBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setJustificationType(builder.justificationType);
		setImpactStatementTime(builder.impactStatementTime);
		setImpactStatement(builder.impactStatement);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Security.VexNotAffectedVulnAssessmentRelationship";
	}
	
	// Getters and Setters
	
	
	/**
	 * @return the justificationType
	 */
	 @SuppressWarnings("unchecked")
	public Optional<VexJustificationType> getJustificationType() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.SECURITY_PROP_JUSTIFICATION_TYPE);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof VexJustificationType)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<VexJustificationType>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	/**
	 * @param justificationType the justificationType to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public VexNotAffectedVulnAssessmentRelationship setJustificationType(@Nullable VexJustificationType justificationType) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_JUSTIFICATION_TYPE, justificationType);
		return this;
	}

		/**
	 * @return the impactStatementTime
	 */
	public Optional<String> getImpactStatementTime() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_IMPACT_STATEMENT_TIME);
	}
	/**
	 * @param impactStatementTime the impactStatementTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public VexNotAffectedVulnAssessmentRelationship setImpactStatementTime(@Nullable String impactStatementTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_IMPACT_STATEMENT_TIME, impactStatementTime);
		return this;
	}

		/**
	 * @return the impactStatement
	 */
	public Optional<String> getImpactStatement() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.SECURITY_PROP_IMPACT_STATEMENT);
	}
	/**
	 * @param impactStatement the impactStatement to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public VexNotAffectedVulnAssessmentRelationship setImpactStatement(@Nullable String impactStatement) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstantsV3.SECURITY_PROP_IMPACT_STATEMENT, impactStatement);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "VexNotAffectedVulnAssessmentRelationship: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		try {
			@SuppressWarnings("unused")
			Optional<VexJustificationType> justificationType = getJustificationType();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting justificationType for VexNotAffectedVulnAssessmentRelationship: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> impactStatementTime = getImpactStatementTime();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting impactStatementTime for VexNotAffectedVulnAssessmentRelationship: "+e.getMessage());
		}
		try {
			@SuppressWarnings("unused")
			Optional<String> impactStatement = getImpactStatement();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting impactStatement for VexNotAffectedVulnAssessmentRelationship: "+e.getMessage());
		}
		return retval;
	}
	
	public static class VexNotAffectedVulnAssessmentRelationshipBuilder extends VexVulnAssessmentRelationshipBuilder {
	
		/**
		 * Create an VexNotAffectedVulnAssessmentRelationshipBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public VexNotAffectedVulnAssessmentRelationshipBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an VexNotAffectedVulnAssessmentRelationshipBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public VexNotAffectedVulnAssessmentRelationshipBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a VexNotAffectedVulnAssessmentRelationshipBuilder
		 * @param modelStore model store for the built VexNotAffectedVulnAssessmentRelationship
		 * @param objectUri objectUri for the built VexNotAffectedVulnAssessmentRelationship
		 * @param copyManager optional copyManager for the built VexNotAffectedVulnAssessmentRelationship
		 */
		public VexNotAffectedVulnAssessmentRelationshipBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		VexJustificationType justificationType = null;
		String impactStatementTime = null;
		String impactStatement = null;
		
		
		/**
		 * Sets the initial value of justificationType
		 * @parameter justificationType value to set
		 * @return this for chaining
		**/
		public VexNotAffectedVulnAssessmentRelationshipBuilder setJustificationType(VexJustificationType justificationType) {
			this.justificationType = justificationType;
			return this;
		}
		
		/**
		 * Sets the initial value of impactStatementTime
		 * @parameter impactStatementTime value to set
		 * @return this for chaining
		**/
		public VexNotAffectedVulnAssessmentRelationshipBuilder setImpactStatementTime(String impactStatementTime) {
			this.impactStatementTime = impactStatementTime;
			return this;
		}
		
		/**
		 * Sets the initial value of impactStatement
		 * @parameter impactStatement value to set
		 * @return this for chaining
		**/
		public VexNotAffectedVulnAssessmentRelationshipBuilder setImpactStatement(String impactStatement) {
			this.impactStatement = impactStatement;
			return this;
		}
	
		
		/**
		 * @return the VexNotAffectedVulnAssessmentRelationship
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public VexNotAffectedVulnAssessmentRelationship build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new VexNotAffectedVulnAssessmentRelationship(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
